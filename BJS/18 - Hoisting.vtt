WEBVTT

1
00:00:00.592 --> 00:00:03.842
(upbeat hip-hop music)

2
00:00:05.830 --> 00:00:06.840
<v Male Instructor>All right, let's talk about</v>

3
00:00:06.840 --> 00:00:08.380
something that's called hoisting.

4
00:00:08.380 --> 00:00:10.110
We talked a little bit about it before,

5
00:00:10.110 --> 00:00:12.300
but let's get into the nitty gritty of what it is

6
00:00:12.300 --> 00:00:13.133
what are the

7
00:00:13.133 --> 00:00:16.220
when can you use it and why might you wanna ever use it.

8
00:00:16.220 --> 00:00:19.130
So hoisting in JavaScript allows you to access

9
00:00:19.130 --> 00:00:22.906
functions and variables before they have been created.

10
00:00:22.906 --> 00:00:24.380
There's two things...

11
00:00:28.150 --> 00:00:29.610
In JavaScript that are hoisted;

12
00:00:29.610 --> 00:00:31.190
function declarations

13
00:00:31.190 --> 00:00:33.470
and variable declarations.

14
00:00:33.470 --> 00:00:36.860
So let's go into function declarations first.

15
00:00:36.860 --> 00:00:39.540
So go ahead and make a hoisting.js in your

16
00:00:39.540 --> 00:00:40.720
playground folder.

17
00:00:40.720 --> 00:00:42.390
Give it your base html,

18
00:00:42.390 --> 00:00:45.340
and then link up a script to hoisting.js.

19
00:00:45.340 --> 00:00:46.790
And then in hoisting.js,

20
00:00:46.790 --> 00:00:48.060
we have nothing.

21
00:00:48.060 --> 00:00:50.740
Just gonna console.log "it works".

22
00:00:50.740 --> 00:00:51.833
Make sure it works.

23
00:00:53.600 --> 00:00:54.690
Good good good!

24
00:00:54.690 --> 00:00:57.510
Okay so let's talk about function.

25
00:00:57.510 --> 00:00:59.700
Let's make a function called "say hi".

26
00:00:59.700 --> 00:01:01.890
Inside of that, we'll console.log "hey!".

27
00:01:02.970 --> 00:01:06.550
Now if I were to try to run that before it exists,

28
00:01:06.550 --> 00:01:08.030
is that going to work?

29
00:01:08.030 --> 00:01:10.151
You see my editors are all ready getting mad at me.

30
00:01:10.151 --> 00:01:12.457
If I hover over it

31
00:01:12.457 --> 00:01:14.610
"sayHi" was used before it was defined.

32
00:01:14.610 --> 00:01:15.443
I already

33
00:01:15.443 --> 00:01:16.930
I have a rule that says you can't do this,

34
00:01:16.930 --> 00:01:18.180
so I'll explain that in just a second.

35
00:01:18.180 --> 00:01:19.950
So is it gonna work?

36
00:01:19.950 --> 00:01:21.210
It works just fine.

37
00:01:21.210 --> 00:01:22.043
Why?

38
00:01:22.043 --> 00:01:23.254
Because hoisting is

39
00:01:23.254 --> 00:01:26.100
is that when you run your JavaScript file,

40
00:01:26.100 --> 00:01:27.460
JavaScript the compiler,

41
00:01:27.460 --> 00:01:31.050
will take all of your function declarations and

42
00:01:32.060 --> 00:01:34.545
Move them to the top of the file,

43
00:01:34.545 --> 00:01:37.220
so that they're all available for you after you use them.

44
00:01:37.220 --> 00:01:38.640
So because of hoisting,

45
00:01:38.640 --> 00:01:42.190
you can technically run a function before it exists.

46
00:01:42.190 --> 00:01:43.023
So lets make another one

47
00:01:43.023 --> 00:01:44.723
function add A and B.

48
00:01:44.723 --> 00:01:47.213
And then we'll return A plus B.

49
00:01:47.213 --> 00:01:50.120
And if I were to use that in here

50
00:01:50.120 --> 00:01:50.953
add

51
00:01:52.390 --> 00:01:54.010
ten and two.

52
00:01:54.010 --> 00:01:55.563
Let's console.log the output.

53
00:01:58.350 --> 00:01:59.830
Is that gonna work?

54
00:01:59.830 --> 00:02:00.890
Yeah twelve.

55
00:02:00.890 --> 00:02:03.800
And I've used the function here before it's defined.

56
00:02:03.800 --> 00:02:05.730
That's because hoisting will move them to the

57
00:02:05.730 --> 00:02:08.993
top before it will actually run anything.

58
00:02:08.993 --> 00:02:11.610
So JavaScript rearranges and puts the functions

59
00:02:11.610 --> 00:02:12.890
at the top of your file.

60
00:02:12.890 --> 00:02:14.120
Why does that exist?

61
00:02:14.120 --> 00:02:15.640
Why might that be there?

62
00:02:15.640 --> 00:02:16.910
I personally don't use it at all

63
00:02:16.910 --> 00:02:19.070
You can see that in my eslint is yelling at me.

64
00:02:19.070 --> 00:02:21.930
I much prefer to first define my functions,

65
00:02:21.930 --> 00:02:23.430
and then go ahead and use them.

66
00:02:23.430 --> 00:02:24.810
Or, as we get into modules,

67
00:02:24.810 --> 00:02:26.760
I much prefer to just put my functions in a

68
00:02:26.760 --> 00:02:27.870
separate module called

69
00:02:27.870 --> 00:02:31.498
like a "util functions" or "math functions",

70
00:02:31.498 --> 00:02:33.850
and then import them as I need them into

71
00:02:33.850 --> 00:02:35.228
the file where they actually run.

72
00:02:35.228 --> 00:02:38.230
The one argument I have heard where hoisting

73
00:02:38.230 --> 00:02:42.830
is useful is people much prefer to have at the

74
00:02:42.830 --> 00:02:44.450
let's say you open up this hoisting.js.

75
00:02:44.450 --> 00:02:45.777
They much prefer to have like

76
00:02:45.777 --> 00:02:48.240
"what does this file do?"

77
00:02:48.240 --> 00:02:50.757
first and then the next one is

78
00:02:50.757 --> 00:02:53.990
"how does this file do it?"

79
00:02:53.990 --> 00:02:57.191
So if you are quickly jumping into a file,

80
00:02:57.191 --> 00:02:59.347
you can just see the first couple lines as

81
00:02:59.347 --> 00:03:00.600
"what does this file do?"

82
00:03:00.600 --> 00:03:02.634
I don't necessarily care how "sayHi" works,

83
00:03:02.634 --> 00:03:04.620
I just wanna know what it does.

84
00:03:04.620 --> 00:03:06.590
But, if you do care what "sayHi" does,

85
00:03:06.590 --> 00:03:08.717
you can of course go a little bit lower in the file,

86
00:03:08.717 --> 00:03:11.930
and look at how that sausage is made.

87
00:03:11.930 --> 00:03:13.070
So

88
00:03:13.070 --> 00:03:14.550
personally,

89
00:03:14.550 --> 00:03:15.950
this is just an opinion,

90
00:03:15.950 --> 00:03:16.819
I don't agree with it,

91
00:03:16.819 --> 00:03:19.938
and I don't use hoisting all that often.

92
00:03:19.938 --> 00:03:21.910
The other type of hoisting is called

93
00:03:21.910 --> 00:03:23.550
variable hoisting.

94
00:03:23.550 --> 00:03:25.475
So if I were to go

95
00:03:25.475 --> 00:03:27.320
let me just go to the top here

96
00:03:27.320 --> 00:03:30.260
if I were to console.log an age variable,

97
00:03:30.260 --> 00:03:33.343
and then say var age is equal to ten,

98
00:03:34.210 --> 00:03:35.240
what are we gonna get there?

99
00:03:35.240 --> 00:03:36.420
Is it gonna log

100
00:03:36.420 --> 00:03:37.970
is it gonna be an error?

101
00:03:37.970 --> 00:03:40.050
Is it going to be undefined,

102
00:03:40.050 --> 00:03:41.150
or is it gonna be ten?

103
00:03:42.130 --> 00:03:43.570
It's undefined.

104
00:03:43.570 --> 00:03:45.270
So if I were to try log like another

105
00:03:45.270 --> 00:03:46.720
variable that doesn't exist,

106
00:03:46.720 --> 00:03:47.553
like cool.

107
00:03:49.727 --> 00:03:51.130
"Cool is not defined."

108
00:03:51.130 --> 00:03:53.762
So what happens is that

109
00:03:53.762 --> 00:03:57.850
JavaScript will hoist the variable declarations,

110
00:03:57.850 --> 00:04:00.630
but it will not hoist the actual setting of the values.

111
00:04:00.630 --> 00:04:01.683
If I check it now.

112
00:04:02.600 --> 00:04:03.433
Age is

113
00:04:03.433 --> 00:04:04.680
Aw, it's not gonna work cause it's not there,

114
00:04:04.680 --> 00:04:07.500
but if I check it there age is set to ten.

115
00:04:07.500 --> 00:04:09.240
So what JavaScript essentially does

116
00:04:09.240 --> 00:04:11.630
is it says before everything runs,

117
00:04:11.630 --> 00:04:13.938
I'm going to make my variables.

118
00:04:13.938 --> 00:04:17.437
Then I'm just gonna go ahead and update them.

119
00:04:17.437 --> 00:04:18.380
(laughs)
And look,

120
00:04:18.380 --> 00:04:19.870
you can't even see var.

121
00:04:19.870 --> 00:04:21.510
I gotta turn off my eslint to do

122
00:04:21.510 --> 00:04:22.690
these terrible things.

123
00:04:22.690 --> 00:04:23.740
Disable

124
00:04:25.070 --> 00:04:26.593
eslint disable.

125
00:04:27.900 --> 00:04:30.140
And that's essentially what JavaScript is doing,

126
00:04:30.140 --> 00:04:31.290
is it's taking the var,

127
00:04:31.290 --> 00:04:32.293
putting it above it.

128
00:04:33.210 --> 00:04:35.950
So I guess you could use hoisting

129
00:04:35.950 --> 00:04:38.454
to figure out if variables are later created,

130
00:04:38.454 --> 00:04:41.350
but not what their values are later in the file.

131
00:04:41.350 --> 00:04:43.450
Again, I just think that adds to confusion.

132
00:04:43.450 --> 00:04:46.390
So just stick that in your back pocket.

133
00:04:46.390 --> 00:04:49.750
Hoisting is variable declarations

134
00:04:49.750 --> 00:04:52.630
and function declarations that are hoisted

135
00:04:52.630 --> 00:04:53.910
to the top of the file.

136
00:04:53.910 --> 00:04:55.680
Only these types of functions.

137
00:04:55.680 --> 00:04:57.650
If I were to put this in a variable,

138
00:04:57.650 --> 00:04:59.870
const add is equal to a function,

139
00:04:59.870 --> 00:05:01.360
that's not

140
00:05:01.360 --> 00:05:02.670
a function declaration,

141
00:05:02.670 --> 00:05:04.560
that's a function stuck in a variable.

142
00:05:04.560 --> 00:05:05.887
And then we get an

143
00:05:05.887 --> 00:05:08.380
"error cannot access add before initialize".

144
00:05:08.380 --> 00:05:10.004
Same with an arrow function or any of the other

145
00:05:10.004 --> 00:05:12.130
types of functions we talked about.

146
00:05:12.130 --> 00:05:14.640
It only works with regular functions

147
00:05:14.640 --> 00:05:17.610
so if I bring that back to a proper function,

148
00:05:17.610 --> 00:05:19.210
then it will hoist itself.

149
00:05:19.210 --> 00:05:20.430
So that's hoisting.

150
00:05:20.430 --> 00:05:21.630
Stick it in your back pocket,

151
00:05:21.630 --> 00:05:23.060
know about it.

152
00:05:23.060 --> 00:05:25.920
But we aren't going to be using that in this course.

153
00:05:25.920 --> 00:05:28.000
Just cause I don't find much use for it.

154
00:05:28.000 --> 00:05:29.500
I'll catch ya in the next one.

