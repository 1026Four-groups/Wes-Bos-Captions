WEBVTT

1
00:00:00.687 --> 00:00:03.270
(upbeat music)

2
00:00:05.000 --> 00:00:07.700
<v ->Next up, let's talk about what's called parameters</v>

3
00:00:07.700 --> 00:00:08.740
and arguments.

4
00:00:08.740 --> 00:00:12.720
So, obviously, we've hard coded here,

5
00:00:12.720 --> 00:00:14.000
the amount of the bill

6
00:00:14.000 --> 00:00:17.340
and we've hard coded the amount of the tax rate

7
00:00:18.180 --> 00:00:19.187
that's not a very--

8
00:00:20.520 --> 00:00:22.627
We always talk in JavaScript when we say,

9
00:00:22.627 --> 00:00:23.580
"Don't Repeat Yourself",

10
00:00:23.580 --> 00:00:25.460
keep your code DRY.

11
00:00:25.460 --> 00:00:27.930
And if you're making a function called calculateBill,

12
00:00:27.930 --> 00:00:30.220
and you're assuming that the bill is $100,

13
00:00:30.220 --> 00:00:32.170
and the tax rate is 13%.

14
00:00:32.170 --> 00:00:34.990
That's not good unless we call the calculateBill for

15
00:00:36.411 --> 00:00:37.911
bill that was 100.

16
00:00:41.710 --> 00:00:42.820
You get the point, right?

17
00:00:42.820 --> 00:00:44.140
That's too specific.

18
00:00:44.140 --> 00:00:45.430
So what we want to do,

19
00:00:45.430 --> 00:00:48.710
is we want to turn these things into variables.

20
00:00:48.710 --> 00:00:51.250
So what we could do here

21
00:00:51.250 --> 00:00:52.440
is...

22
00:00:52.440 --> 00:00:55.040
maybe we'll go up here,

23
00:00:55.040 --> 00:00:59.500
and we'll say, let bill is equal to 100

24
00:00:59.500 --> 00:01:04.333
and let tax rate is equal to 0.13.

25
00:01:05.440 --> 00:01:07.540
And then what we'll do in here

26
00:01:07.540 --> 00:01:10.250
is we just replace that with bill

27
00:01:10.250 --> 00:01:14.360
and we replace this with 1 plus taxRate.

28
00:01:16.230 --> 00:01:18.030
And that will probably work.

29
00:01:18.030 --> 00:01:20.220
But, you could probably tell by the sound of my voice,

30
00:01:20.220 --> 00:01:21.490
that's not the best way to do it

31
00:01:21.490 --> 00:01:22.600
and I'll tell you why.

32
00:01:22.600 --> 00:01:23.830
So the reason we don't do this

33
00:01:23.830 --> 00:01:26.260
is because this function right here, calculateBill

34
00:01:26.260 --> 00:01:28.910
is relying on what is called global variables.

35
00:01:28.910 --> 00:01:31.360
Now, we're going to go much more into scope

36
00:01:31.360 --> 00:01:35.330
and global variables and scoping variables to a function

37
00:01:35.330 --> 00:01:37.310
and these things called closures,

38
00:01:37.310 --> 00:01:40.440
which is kind of a nifty way to use variables.

39
00:01:40.440 --> 00:01:42.170
But for right now, what we need to know

40
00:01:42.170 --> 00:01:45.030
is that this is a function that needs some data.

41
00:01:45.030 --> 00:01:47.920
And when the function is not passed in data,

42
00:01:47.920 --> 00:01:49.350
it sort of does this thing called

43
00:01:49.350 --> 00:01:51.320
reaching outside of the function

44
00:01:51.320 --> 00:01:54.160
in order to look up that data in a higher scope.

45
00:01:54.160 --> 00:01:56.810
Again, we'll go into scope more in a future video.

46
00:01:56.810 --> 00:01:58.080
So what we need to know right now is

47
00:01:58.080 --> 00:01:59.970
it's not great to reach outside of a function

48
00:01:59.970 --> 00:02:02.090
on order to get your data.

49
00:02:02.090 --> 00:02:03.720
Now, if we wanted to do like,

50
00:02:03.720 --> 00:02:06.040
let's get rid of this console log here.

51
00:02:06.040 --> 00:02:07.440
Let's get rid of that.

52
00:02:07.440 --> 00:02:10.580
And let's just make a myTotal2 and run it.

53
00:02:10.580 --> 00:02:13.737
And then we'll console log myTotal and myTotal2.

54
00:02:15.530 --> 00:02:17.500
And by the way, you can pass console log

55
00:02:17.500 --> 00:02:19.290
as many arguments as you want.

56
00:02:19.290 --> 00:02:21.420
So here I'm doing 1 comma 2,

57
00:02:21.420 --> 00:02:24.450
and it'll just log as many pieces of data as you pass it.

58
00:02:24.450 --> 00:02:26.350
Here we see, yeah you see both pieces of data.

59
00:02:26.350 --> 00:02:28.180
So what if I wanted a new total?

60
00:02:28.180 --> 00:02:30.260
Well, I could go up here and I could say,

61
00:02:30.260 --> 00:02:33.323
bill is equal to 200.

62
00:02:35.010 --> 00:02:36.030
And now we have an error

63
00:02:36.030 --> 00:02:38.880
because we're trying to reassign a const,

64
00:02:38.880 --> 00:02:41.320
we'll go up here and change this to a let,

65
00:02:41.320 --> 00:02:42.960
and refresh it and now it works.

66
00:02:42.960 --> 00:02:44.760
But you see, all of that work that we did,

67
00:02:44.760 --> 00:02:47.590
where we're in between running these two pieces of code,

68
00:02:47.590 --> 00:02:50.480
we had to change a variable that was set before

69
00:02:50.480 --> 00:02:54.220
and then is yanked into this function outside.

70
00:02:54.220 --> 00:02:56.330
This gets confusing really quickly

71
00:02:56.330 --> 00:02:59.620
and this, it's how you build very brittle applications.

72
00:02:59.620 --> 00:03:00.950
So what we want to do is,

73
00:03:00.950 --> 00:03:03.220
instead of sort of reaching outside,

74
00:03:03.220 --> 00:03:05.500
we want to pass into our functions,

75
00:03:05.500 --> 00:03:07.060
the pieces of data that we need.

76
00:03:07.060 --> 00:03:08.880
So let's do a little bit of cleanup here.

77
00:03:08.880 --> 00:03:11.603
Let's get rid of these global variables right here.

78
00:03:12.550 --> 00:03:14.350
We'll get rid of this line

79
00:03:14.350 --> 00:03:16.860
and the myTotal and get rid of that.

80
00:03:16.860 --> 00:03:21.310
Now what we want to do is these variables bill and taxRate,

81
00:03:21.310 --> 00:03:23.710
we want to make them what are called params

82
00:03:23.710 --> 00:03:24.640
for your functions.

83
00:03:24.640 --> 00:03:27.160
So when you define your function,

84
00:03:27.160 --> 00:03:29.430
and you say, okay, when somebody calls it,

85
00:03:29.430 --> 00:03:32.870
I am going to expect somebody to pass me some data.

86
00:03:32.870 --> 00:03:34.800
So, we put in params,

87
00:03:34.800 --> 00:03:36.960
I like to think of them as placeholders.

88
00:03:36.960 --> 00:03:40.480
So we'll say someone will pass us in a bill,

89
00:03:40.480 --> 00:03:41.690
let's call it billAmount,

90
00:03:41.690 --> 00:03:43.970
and somebody will pass us in a taxRate.

91
00:03:46.810 --> 00:03:49.520
Then what we can do is inside of our function body,

92
00:03:49.520 --> 00:03:51.930
we will have access to these variables

93
00:03:51.930 --> 00:03:53.730
that are passed into us.

94
00:03:53.730 --> 00:03:54.750
It's kind of confusing

95
00:03:54.750 --> 00:03:57.780
because there's no creation of these variables,

96
00:03:57.780 --> 00:03:59.740
but I'll explain that in just a second.

97
00:03:59.740 --> 00:04:02.860
Then we can go in here and call this a billAmount

98
00:04:02.860 --> 00:04:04.800
and we call this taxRate as well

99
00:04:04.800 --> 00:04:06.670
and then we return our total.

100
00:04:06.670 --> 00:04:10.210
Now when we go ahead and run it, we can then pass it.

101
00:04:10.210 --> 00:04:12.420
The first thing it wants is the billAmount,

102
00:04:12.420 --> 00:04:14.220
so we'll say it was $100.

103
00:04:14.220 --> 00:04:17.950
And then the second thing it wants is a taxRate, 0.13.

104
00:04:17.950 --> 00:04:20.973
Then if I console log myTotal,

105
00:04:24.500 --> 00:04:26.260
you see that we get our value here,

106
00:04:26.260 --> 00:04:28.713
but I'm able to make a myTotal2 really quickly.

107
00:04:38.299 --> 00:04:41.180
And you see that it works without having to reassign.

108
00:04:41.180 --> 00:04:42.013
Why?

109
00:04:42.013 --> 00:04:43.640
Because when you define a function,

110
00:04:43.640 --> 00:04:46.250
you can place what are called parameters.

111
00:04:46.250 --> 00:04:47.720
These are called parameters.

112
00:04:47.720 --> 00:04:48.990
And I always remember it

113
00:04:48.990 --> 00:04:51.960
because 'p', parameter is a placeholder

114
00:04:51.960 --> 00:04:54.430
and then when you run it, you pass the values

115
00:04:54.430 --> 00:04:56.310
these are called arguments.

116
00:04:56.310 --> 00:04:58.100
I actually have a nifty little thing here

117
00:04:58.100 --> 00:04:59.560
let me open it up for you.

118
00:04:59.560 --> 00:05:02.860
This will be in the README of the repo for this,

119
00:05:02.860 --> 00:05:05.200
if you want to grab it yourself.

120
00:05:05.200 --> 00:05:07.400
So I've got this little function definition,

121
00:05:07.400 --> 00:05:09.547
so a cheat sheet that I put together here

122
00:05:09.547 --> 00:05:11.420
and again, this will be in the README.

123
00:05:11.420 --> 00:05:14.150
So right here, this is our function definition

124
00:05:14.150 --> 00:05:17.290
and when we define the function name,

125
00:05:17.290 --> 00:05:19.070
we put in what are called parameters,

126
00:05:19.070 --> 00:05:21.570
again, parameters, or what are called placeholders,

127
00:05:21.570 --> 00:05:22.850
we'll talk about this in the future.

128
00:05:22.850 --> 00:05:24.720
This is called the default value

129
00:05:24.720 --> 00:05:27.160
and then when you actually run your function,

130
00:05:27.160 --> 00:05:29.040
or you call it or you invoke it,

131
00:05:29.040 --> 00:05:31.670
those are three names to actually run your function,

132
00:05:31.670 --> 00:05:34.520
you pass it the data that will take place

133
00:05:34.520 --> 00:05:35.740
of these variables.

134
00:05:35.740 --> 00:05:40.590
So meal will be 100, taxRate will be 0.13.

135
00:05:40.590 --> 00:05:42.190
And these are called arguments.

136
00:05:42.190 --> 00:05:45.940
So you'll hear people interchangeably use those two things.

137
00:05:45.940 --> 00:05:49.380
But the way to remember it is parameters are placeholders,

138
00:05:49.380 --> 00:05:51.700
meaning that when we define our function,

139
00:05:51.700 --> 00:05:52.533
they're just a placeholder

140
00:05:52.533 --> 00:05:54.620
because we don't know what that data will be

141
00:05:54.620 --> 00:05:56.360
until they're actually run.

142
00:05:56.360 --> 00:05:58.170
And then when you run your function,

143
00:05:58.170 --> 00:06:00.570
the things that you pass in are called arguments

144
00:06:00.570 --> 00:06:02.300
because they are actual value.

145
00:06:02.300 --> 00:06:04.987
So 'p', parameter is a placeholder

146
00:06:04.987 --> 00:06:07.900
or possible, some people have said as well,

147
00:06:07.900 --> 00:06:11.840
and 'a', arguments are actual values.

148
00:06:11.840 --> 00:06:12.860
Let's keep going with this.

149
00:06:12.860 --> 00:06:14.613
Let's bring this back to myTotal,

150
00:06:14.613 --> 00:06:15.880
it'll just have this one.

151
00:06:15.880 --> 00:06:17.830
So in this case, I'm running my function

152
00:06:17.830 --> 00:06:20.480
and as arguments, I'm passing straightaway numbers,

153
00:06:20.480 --> 00:06:24.050
however the values that get passed into a function

154
00:06:24.050 --> 00:06:26.620
can be in a variable as well.

155
00:06:26.620 --> 00:06:28.690
This is a common hang up that people have

156
00:06:28.690 --> 00:06:30.390
when learning how functions work

157
00:06:30.390 --> 00:06:32.080
is how they sort of get renamed.

158
00:06:32.080 --> 00:06:34.410
So let's take a look right here.

159
00:06:34.410 --> 00:06:36.760
When we have a function called calculateBill,

160
00:06:36.760 --> 00:06:39.010
when the data gets passed in,

161
00:06:39.010 --> 00:06:40.450
there is going to be variables

162
00:06:40.450 --> 00:06:42.453
that are available inside of this function,

163
00:06:42.453 --> 00:06:45.520
they're going to be what's called scope to this function

164
00:06:45.520 --> 00:06:47.770
and they are only available inside of this function

165
00:06:47.770 --> 00:06:49.100
as to what they are passed in.

166
00:06:49.100 --> 00:06:52.230
So if I were to go in here, and console.log,

167
00:06:52.230 --> 00:06:53.150
the billAmount

168
00:06:55.000 --> 00:06:56.120
and the taxRate,

169
00:06:59.360 --> 00:07:02.880
you'll see that when it runs, it tells me it's 100 and 0.13.

170
00:07:02.880 --> 00:07:04.960
Again, I can run that function all day long,

171
00:07:04.960 --> 00:07:06.283
I can even run it in here.

172
00:07:11.320 --> 00:07:15.700
And you see that we actually get the 200 and 0.2.

173
00:07:15.700 --> 00:07:16.533
Why?

174
00:07:16.533 --> 00:07:18.310
Because JavaScript will take whatever it is

175
00:07:18.310 --> 00:07:20.510
that you write as an argument,

176
00:07:20.510 --> 00:07:22.410
and then when you call the function,

177
00:07:22.410 --> 00:07:24.350
it will sort of make a temporary available

178
00:07:24.350 --> 00:07:26.470
and make them available to you

179
00:07:26.470 --> 00:07:29.700
via the names that you put in your parameters.

180
00:07:29.700 --> 00:07:32.220
Now, where it gets a little bit confusing to people,

181
00:07:32.220 --> 00:07:34.437
is if somebody has a variable here,

182
00:07:34.437 --> 00:07:37.150
and they say const, like wesTotal,

183
00:07:37.150 --> 00:07:40.740
and we'll say, maybe my bill was $500

184
00:07:40.740 --> 00:07:42.940
and const wesTaxRate,

185
00:07:44.360 --> 00:07:45.830
maybe I have my own tax rate,

186
00:07:45.830 --> 00:07:48.870
and it's 0.3%, 30% tax rate,

187
00:07:48.870 --> 00:07:49.910
then what you can do is

188
00:07:49.910 --> 00:07:51.970
if you have these values in a variable,

189
00:07:51.970 --> 00:07:55.110
you can actually pass them into a function like this

190
00:07:55.110 --> 00:07:59.510
wesTotal and we'll go in here and call it WesTaxRate.

191
00:08:00.580 --> 00:08:03.330
Now the big confusion is,

192
00:08:03.330 --> 00:08:07.370
well, if there are variables here,

193
00:08:07.370 --> 00:08:09.890
and you pass them in here,

194
00:08:09.890 --> 00:08:12.970
then when it's called inside of the function,

195
00:08:12.970 --> 00:08:15.723
is this called billAmount, or is it called wesTotal?

196
00:08:16.700 --> 00:08:18.320
Is this even going to work,

197
00:08:18.320 --> 00:08:20.840
the fact that you just ran it with with a variable

198
00:08:20.840 --> 00:08:23.720
that was not named the thing of the parameter?

199
00:08:23.720 --> 00:08:26.350
Well I'll refresh it, it works just fine.

200
00:08:26.350 --> 00:08:29.680
So we get 500 and 0.3.

201
00:08:29.680 --> 00:08:32.280
So when you run a function in JavaScript,

202
00:08:32.280 --> 00:08:35.030
what happens is JavaScript just takes in

203
00:08:35.030 --> 00:08:36.590
whatever you've passed it,

204
00:08:36.590 --> 00:08:38.530
and whether you've passed it that value

205
00:08:38.530 --> 00:08:41.280
directly as a number,

206
00:08:41.280 --> 00:08:46.100
or a string, or whether you've pass it in via reference,

207
00:08:46.100 --> 00:08:49.460
meaning that you've just passed it reference to a variable,

208
00:08:49.460 --> 00:08:51.310
which in turn will hold a value,

209
00:08:51.310 --> 00:08:53.280
at the end of the day, we're still passing values,

210
00:08:53.280 --> 00:08:54.810
whether you pass it directly,

211
00:08:54.810 --> 00:08:57.100
or whether you pass it reference to a variable

212
00:08:57.100 --> 00:08:58.270
that holds value,

213
00:08:58.270 --> 00:09:01.360
JavaScript doesn't care how you're passing it in.

214
00:09:01.360 --> 00:09:03.200
And as soon as the function runs,

215
00:09:03.200 --> 00:09:05.680
it doesn't care about whether you pass in a variable

216
00:09:05.680 --> 00:09:07.350
or whether you pass in a value,

217
00:09:07.350 --> 00:09:10.410
because it just knows that you passed in a value.

218
00:09:10.410 --> 00:09:12.177
And then what JavaScript does is it says,

219
00:09:12.177 --> 00:09:15.860
"Okay, take whatever they passed in as the first argument,"

220
00:09:15.860 --> 00:09:18.170
Whether that's a variable value of 500,

221
00:09:18.170 --> 00:09:21.380
or whether I've passed it in as a straight ahead 100.

222
00:09:21.380 --> 00:09:22.990
And then just make a variable

223
00:09:22.990 --> 00:09:24.970
that's available inside the confines

224
00:09:24.970 --> 00:09:27.930
of these curly brackets, that is called billAmount.

225
00:09:27.930 --> 00:09:29.250
So when this function is running,

226
00:09:29.250 --> 00:09:31.420
it does not care about anything else

227
00:09:31.420 --> 00:09:33.780
that's going outside of this function.

228
00:09:33.780 --> 00:09:36.380
It just knows that it's doing its job.

229
00:09:36.380 --> 00:09:38.490
It's been passed in the two little pieces of data

230
00:09:38.490 --> 00:09:40.520
that it needs, it does this little math,

231
00:09:40.520 --> 00:09:42.650
and then it returns its value in there.

232
00:09:42.650 --> 00:09:45.960
So when values get passed into a function,

233
00:09:45.960 --> 00:09:48.730
they sort of get renamed into whatever it is

234
00:09:48.730 --> 00:09:51.890
that you've defined your function parameters as.

235
00:09:51.890 --> 00:09:54.530
Let's do another example to sort of get that down pat,

236
00:09:54.530 --> 00:09:56.560
because honestly, when I'm teaching JavaScript,

237
00:09:56.560 --> 00:09:59.710
this is probably by far the most common thing that happens.

238
00:09:59.710 --> 00:10:02.290
So let's make another function here

239
00:10:02.290 --> 00:10:03.960
called function sayHiTo.

240
00:10:05.530 --> 00:10:10.450
And inside of that, we will simply just return, Hello.

241
00:10:10.450 --> 00:10:15.077
And we'll pass in somebody's we'll call it firstName.

242
00:10:16.760 --> 00:10:20.683
And then I will const greeting is equal to sayHiTo.

243
00:10:21.710 --> 00:10:23.270
And we'll go ahead and run it

244
00:10:23.270 --> 00:10:25.680
and obviously this is going to break.

245
00:10:25.680 --> 00:10:26.803
But let's see why.

246
00:10:27.670 --> 00:10:29.103
Console log that greeting.

247
00:10:31.170 --> 00:10:33.307
Let's get rid of this running right here,

248
00:10:33.307 --> 00:10:35.240
just want to keep it as clean as possible.

249
00:10:35.240 --> 00:10:37.520
Here we go, ReferenceError: firstName is not defined.

250
00:10:37.520 --> 00:10:38.353
Okay, good.

251
00:10:38.353 --> 00:10:40.610
So what happens is this function,

252
00:10:40.610 --> 00:10:41.800
first, what it will do is

253
00:10:41.800 --> 00:10:44.800
it will look inside of its own function confines,

254
00:10:44.800 --> 00:10:47.550
its own function scope, which is these curly brackets.

255
00:10:47.550 --> 00:10:50.337
And it'll say, "Do I have a variable name, firstName,

256
00:10:50.337 --> 00:10:51.470
"that's been passed in?"

257
00:10:51.470 --> 00:10:53.680
And if there's not, what it will start to do is

258
00:10:53.680 --> 00:10:55.810
it will go up to a higher level scope,

259
00:10:55.810 --> 00:10:56.643
and look there.

260
00:10:56.643 --> 00:10:59.240
Again, this is not a full explanation of scope,

261
00:10:59.240 --> 00:11:01.350
but we're going to go into that much more.

262
00:11:01.350 --> 00:11:03.550
So if there was a firstName variable here,

263
00:11:03.550 --> 00:11:05.930
maybe we'll set that to wes, it would actually work.

264
00:11:05.930 --> 00:11:06.763
Watch.

265
00:11:07.680 --> 00:11:08.513
Hello wes.

266
00:11:08.513 --> 00:11:09.346
Why?

267
00:11:09.346 --> 00:11:11.580
Because it will try to reach outside for that data,

268
00:11:11.580 --> 00:11:14.720
if nothing is found in the scope of that function.

269
00:11:14.720 --> 00:11:17.560
So what we want to do is modify this, right?

270
00:11:17.560 --> 00:11:18.460
What was this called?

271
00:11:18.460 --> 00:11:20.520
This is called a function definition.

272
00:11:20.520 --> 00:11:22.650
And then we'll set it to take in one parameter,

273
00:11:22.650 --> 00:11:24.797
which is a let's call it firstName.

274
00:11:26.030 --> 00:11:29.160
Then when we run it, we have to actually pass it

275
00:11:29.160 --> 00:11:31.230
a string called Wes

276
00:11:31.230 --> 00:11:33.090
and then we will have our greeting.

277
00:11:33.090 --> 00:11:35.967
And what's nice about that is that we can make sayHiTo

278
00:11:38.030 --> 00:11:41.480
and you can say Wes, you can say Kate,

279
00:11:41.480 --> 00:11:44.520
you can say Snickers you get the point that right here.

280
00:11:44.520 --> 00:11:46.800
As long as we pass in an argument in this case Wes,

281
00:11:46.800 --> 00:11:49.700
it's going to have a variable inside of this function

282
00:11:49.700 --> 00:11:52.610
that is referenced to whatever the person has passed in.

283
00:11:52.610 --> 00:11:54.440
If we actually don't run it with anything,

284
00:11:54.440 --> 00:11:55.453
look what happens.

285
00:11:56.850 --> 00:11:58.610
Hello undefined

286
00:11:58.610 --> 00:11:59.730
and the reason we have that is

287
00:11:59.730 --> 00:12:02.830
because when a function runs,

288
00:12:02.830 --> 00:12:04.810
it will create the variable for us

289
00:12:04.810 --> 00:12:08.450
and then set it to whatever the person has passed in.

290
00:12:08.450 --> 00:12:10.150
But if it creates a variable

291
00:12:10.150 --> 00:12:12.330
and someone doesn't pass in anything,

292
00:12:12.330 --> 00:12:14.330
then it'll just be set to undefined,

293
00:12:14.330 --> 00:12:16.860
exactly how variables work.

294
00:12:16.860 --> 00:12:19.090
Let's keep going with a few more examples here.

295
00:12:19.090 --> 00:12:21.810
Let's talk about passing expressions.

296
00:12:21.810 --> 00:12:24.550
So we'll go back to this calculateBill here

297
00:12:24.550 --> 00:12:28.563
and we'll say const myTotal3 is equal to calculateBill.

298
00:12:31.850 --> 00:12:34.930
And obviously, we can pass 100 and 0.15.

299
00:12:34.930 --> 00:12:36.680
We've done that a million times

300
00:12:36.680 --> 00:12:40.390
and we have our myTotal3 value.

301
00:12:40.390 --> 00:12:45.213
What happens if we do this 20 plus 20 plus 30 plus 20.

302
00:12:46.280 --> 00:12:48.420
Is that going to work?

303
00:12:48.420 --> 00:12:52.610
And we'll take a look at myTotal3 and we see 90.15.

304
00:12:52.610 --> 00:12:55.220
Oh, I think I goofed this up.

305
00:12:55.220 --> 00:12:57.990
Part of what we're going to learn about is BEDMAS

306
00:12:57.990 --> 00:12:59.430
which is brackets first,

307
00:12:59.430 --> 00:13:01.270
and I here I am screwing it up.

308
00:13:01.270 --> 00:13:03.073
So make sure you put the parentheses on that

309
00:13:03.073 --> 00:13:06.760
because it needs to add the taxRate before it multiplies.

310
00:13:06.760 --> 00:13:08.300
Otherwise it does it in a weird order.

311
00:13:08.300 --> 00:13:12.543
But, and now take a look, there we go $103 and 50 cents.

312
00:13:13.690 --> 00:13:14.940
That works, why?

313
00:13:14.940 --> 00:13:17.010
Well, because the only thing

314
00:13:17.010 --> 00:13:19.697
that a function can take in is a value

315
00:13:19.697 --> 00:13:22.110
and whether you pass that value directly

316
00:13:22.110 --> 00:13:23.240
as in a number,

317
00:13:23.240 --> 00:13:26.140
whether you pass that value in as a variable,

318
00:13:26.140 --> 00:13:27.940
which holds a value, that works.

319
00:13:27.940 --> 00:13:30.290
And then you can also pass in expressions

320
00:13:30.290 --> 00:13:32.920
and you're not actually passing in an expression.

321
00:13:32.920 --> 00:13:35.780
In this case, we're just running an expression

322
00:13:35.780 --> 00:13:38.913
and that will first run it will add that up to $90

323
00:13:39.790 --> 00:13:42.330
and then it will pass the raw value of 90.

324
00:13:42.330 --> 00:13:46.280
So absolutely, totally fine to do something like that.

325
00:13:46.280 --> 00:13:48.310
It's actually pretty common because

326
00:13:48.310 --> 00:13:50.990
even if you mix and match like const like

327
00:13:50.990 --> 00:13:53.880
Kate had a bill that was $100

328
00:13:53.880 --> 00:13:56.683
and I'll take Kate's bill when I'm running it,

329
00:13:57.630 --> 00:13:59.020
we'll call it Kate,

330
00:13:59.020 --> 00:14:02.130
and then I'll add my own bill which was $50, right?

331
00:14:02.130 --> 00:14:04.880
So it's totally fine to mix and match those types of things,

332
00:14:04.880 --> 00:14:06.950
it's still going to work,

333
00:14:06.950 --> 00:14:10.780
regardless of what's going on.

334
00:14:10.780 --> 00:14:14.580
Let's bring that back, remove this example, pretty simple.

335
00:14:14.580 --> 00:14:17.030
Let's do another example here,

336
00:14:17.030 --> 00:14:20.790
where we pass functions as arguments.

337
00:14:20.790 --> 00:14:25.360
So we'll make a function called doctorize here.

338
00:14:25.360 --> 00:14:28.810
And that will take in a name argument,

339
00:14:28.810 --> 00:14:33.393
and we will return just doctor and we'll put the name there.

340
00:14:34.270 --> 00:14:36.100
Then in here, we're going to make another function

341
00:14:36.100 --> 00:14:39.730
called yell and that takes in a name as well.

342
00:14:39.730 --> 00:14:41.643
And we are going to return,

343
00:14:42.610 --> 00:14:44.890
we're just going to say "Hey,"

344
00:14:44.890 --> 00:14:46.710
and then we're going to take the person's name

345
00:14:46.710 --> 00:14:51.180
and run it at toUpperCase on the end.

346
00:14:51.180 --> 00:14:52.650
Now we have two functions here.

347
00:14:52.650 --> 00:14:54.117
You might be saying like, "Hey Wes,

348
00:14:54.117 --> 00:14:55.797
"you've reused a variable."

349
00:14:56.658 --> 00:14:59.670
Well, it's not okay to reuse variables

350
00:14:59.670 --> 00:15:01.840
in the same scope multiple times,

351
00:15:01.840 --> 00:15:04.230
it is okay to reuse parameters.

352
00:15:04.230 --> 00:15:05.063
Why?

353
00:15:05.063 --> 00:15:07.360
Because parameters when they're passed in,

354
00:15:07.360 --> 00:15:08.990
when arguments are passed in,

355
00:15:08.990 --> 00:15:11.390
they are only available inside of that function.

356
00:15:11.390 --> 00:15:15.160
So, never will you run into a collision where the name

357
00:15:15.160 --> 00:15:18.040
that you pass in here is going to overwrite this

358
00:15:18.040 --> 00:15:20.330
because these are their own little confines,

359
00:15:20.330 --> 00:15:22.900
they are their own little scoped functions.

360
00:15:22.900 --> 00:15:25.320
And the name that gets passed into doctorize,

361
00:15:25.320 --> 00:15:27.270
is only available inside of this function

362
00:15:27.270 --> 00:15:28.900
and it'll never collide with the name

363
00:15:28.900 --> 00:15:30.400
that is inside of here.

364
00:15:30.400 --> 00:15:32.630
Now what's kind of cool about that is

365
00:15:32.630 --> 00:15:34.060
let's just try go ahead and run it.

366
00:15:34.060 --> 00:15:37.490
So doctorize, we'll call it wes.

367
00:15:37.490 --> 00:15:39.893
And if we try that with yell,

368
00:15:41.150 --> 00:15:42.490
we get Hey, Wes.

369
00:15:42.490 --> 00:15:44.270
Now what's kind of cool is

370
00:15:44.270 --> 00:15:48.930
that you can pass the output of doctoize

371
00:15:48.930 --> 00:15:52.980
into yell so we can say yell,

372
00:15:52.980 --> 00:15:54.073
doctorize,

373
00:15:56.460 --> 00:15:58.853
And we could say, wes.

374
00:15:59.810 --> 00:16:01.020
Hey, Dr. Wes.

375
00:16:01.020 --> 00:16:03.080
So what just happened there is

376
00:16:03.080 --> 00:16:05.423
let's bring that down over here.

377
00:16:06.480 --> 00:16:09.390
What happens here is brackets go first

378
00:16:09.390 --> 00:16:12.417
so anything that is inside of here, it says, "Okay, well,

379
00:16:12.417 --> 00:16:14.250
"I need to first run this function."

380
00:16:14.250 --> 00:16:17.110
And hopefully that returns a value, which it does,

381
00:16:17.110 --> 00:16:18.630
it returns Hello in the...

382
00:16:19.560 --> 00:16:21.440
It returns doctor in the name.

383
00:16:21.440 --> 00:16:24.050
And then the value that's returned from doctorize

384
00:16:24.050 --> 00:16:27.620
immediately gets passed into yell as an argument,

385
00:16:27.620 --> 00:16:31.150
and then that will in turn return, "Hey, Dr. Wes."

386
00:16:31.150 --> 00:16:33.780
So again, just another way that we can pass a value

387
00:16:33.780 --> 00:16:36.210
to a function is the output of a function

388
00:16:36.210 --> 00:16:38.210
is just a value at the end of the day

389
00:16:38.210 --> 00:16:41.070
and you can actually run that directly.

390
00:16:41.070 --> 00:16:42.377
Now let's talk about default values.

391
00:16:42.377 --> 00:16:45.300
I'm going to comment out this yell right here

392
00:16:45.300 --> 00:16:47.300
or just remove it entirely.

393
00:16:47.300 --> 00:16:49.970
And let's go up to this taxRate right here.

394
00:16:49.970 --> 00:16:52.750
You may be thinking like, that's a little bit silly

395
00:16:52.750 --> 00:16:56.130
to have to pass it in, directly every single time

396
00:16:56.130 --> 00:17:00.670
or even if we go to this yell function that we have here.

397
00:17:00.670 --> 00:17:04.760
If I run yell and it says Wes, obviously it works.

398
00:17:04.760 --> 00:17:08.380
But if I run, just yell directly,

399
00:17:08.380 --> 00:17:10.977
without passing in an argument, it just says,

400
00:17:10.977 --> 00:17:14.307
"Uncaught TypeError: cannot read property 'toUppercase'

401
00:17:14.307 --> 00:17:15.430
"of undefined."

402
00:17:15.430 --> 00:17:16.650
What's happening is that

403
00:17:16.650 --> 00:17:20.040
this toUppercase function, it's technically a method,

404
00:17:20.040 --> 00:17:21.920
we'll go into that in a bit.

405
00:17:21.920 --> 00:17:23.730
It's trying to run it against something

406
00:17:23.730 --> 00:17:25.430
that didn't get passed in.

407
00:17:25.430 --> 00:17:27.560
And that's just the first of all,

408
00:17:27.560 --> 00:17:29.090
you shouldn't have forgot it.

409
00:17:29.090 --> 00:17:33.660
But if someone forgets to pass a value to the yell function,

410
00:17:33.660 --> 00:17:35.710
our whole program's going to break.

411
00:17:35.710 --> 00:17:36.610
So what we can do is

412
00:17:36.610 --> 00:17:38.760
we can actually set what's called defaults.

413
00:17:38.760 --> 00:17:40.190
When you define your function

414
00:17:40.190 --> 00:17:42.250
inside of your function definition,

415
00:17:42.250 --> 00:17:44.210
you can set a default by saying

416
00:17:44.210 --> 00:17:46.410
name is equal to

417
00:17:46.410 --> 00:17:49.373
and we'll call him, Silly Goose.

418
00:17:50.800 --> 00:17:53.630
And now what will happen is if I run this again,

419
00:17:53.630 --> 00:17:56.400
with yell, passing wes, it will still work.

420
00:17:56.400 --> 00:18:00.890
But if you pass it without passing any value to it,

421
00:18:00.890 --> 00:18:04.470
it will fall back to whatever the default value was

422
00:18:04.470 --> 00:18:05.910
in your function definition.

423
00:18:05.910 --> 00:18:06.743
So that's great.

424
00:18:06.743 --> 00:18:08.580
So as you define your function, you can say,

425
00:18:08.580 --> 00:18:13.230
if somebody does not pass this parameter here called name,

426
00:18:13.230 --> 00:18:16.150
just default it to Silly Goose.

427
00:18:16.150 --> 00:18:18.570
So we can go up here to our taxRate,

428
00:18:18.570 --> 00:18:22.660
and we can always just set a default to 0.13.

429
00:18:22.660 --> 00:18:24.130
And what that will allow us to do

430
00:18:24.130 --> 00:18:26.330
is we can simply just call our calculateBill

431
00:18:29.620 --> 00:18:32.960
with $100, and it'll say, "Okay, well, they didn't pass

432
00:18:32.960 --> 00:18:36.760
a tax rate. So we're just going to default to 0.13."

433
00:18:36.760 --> 00:18:39.810
And we get our actual value that's returned here.

434
00:18:39.810 --> 00:18:43.310
So I often like to do that even if you go as far

435
00:18:43.310 --> 00:18:46.910
as to just say name is equal to an empty string.

436
00:18:46.910 --> 00:18:49.740
What that will do, is it will just make sure

437
00:18:49.740 --> 00:18:52.080
that it falls back to an empty string

438
00:18:52.080 --> 00:18:53.700
and it won't error out,

439
00:18:53.700 --> 00:18:56.270
it just won't show you anything in that case.

440
00:18:56.270 --> 00:18:58.420
So you'll see me doing that sometimes

441
00:18:58.420 --> 00:19:00.240
when we hit a lot of our exercises.

442
00:19:00.240 --> 00:19:01.760
I'll just set the default to be

443
00:19:01.760 --> 00:19:04.070
a value of nothing of that type.

444
00:19:04.070 --> 00:19:06.690
And that's just to sort of safeguard myself

445
00:19:06.690 --> 00:19:10.140
from any cases where I'm not passing it in

446
00:19:10.140 --> 00:19:12.430
or forget or something like that.

447
00:19:12.430 --> 00:19:13.890
Let's take it one step further now

448
00:19:13.890 --> 00:19:15.870
and let's modify this calculateBill

449
00:19:15.870 --> 00:19:17.670
to also take a tip rate.

450
00:19:17.670 --> 00:19:18.600
So let's go in here.

451
00:19:18.600 --> 00:19:20.900
We'll take a billAmount, a taxRate

452
00:19:20.900 --> 00:19:25.050
and then we'll also have a tipRate argument.

453
00:19:25.050 --> 00:19:29.010
Let's default the tip to 0.15%, 15%.

454
00:19:29.010 --> 00:19:32.720
By the way, the Europeans that are listening

455
00:19:32.720 --> 00:19:35.180
where tip is not required in taxes

456
00:19:35.180 --> 00:19:39.610
but built into the price, congratulations, you're lucky.

457
00:19:39.610 --> 00:19:42.810
Not so easy here in Canada and in the U.S.

458
00:19:42.810 --> 00:19:45.100
So let's get rid of this console log here.

459
00:19:45.100 --> 00:19:47.900
And now what we do is we say the total is equal

460
00:19:47.900 --> 00:19:50.420
to the billAmount plus

461
00:19:50.420 --> 00:19:52.940
and we'll take this and we'll say the

462
00:19:56.509 --> 00:20:00.200
billAmount times taxRate plus

463
00:20:00.200 --> 00:20:03.960
and we'll say it's the billAmount times the tipRate.

464
00:20:05.610 --> 00:20:07.760
Now you see my Prettier right there,

465
00:20:07.760 --> 00:20:10.610
I just put in those parentheses because I was thinking

466
00:20:10.610 --> 00:20:13.840
that these had to run first and then I gave it a save

467
00:20:13.840 --> 00:20:15.400
and Prettier automatically fixed it

468
00:20:15.400 --> 00:20:18.330
because those were unnecessary parentheses

469
00:20:18.330 --> 00:20:19.640
that were put in there,

470
00:20:19.640 --> 00:20:22.320
the BEDMAS rules do not need to happen there.

471
00:20:22.320 --> 00:20:23.950
So when I save it, it just removes them.

472
00:20:23.950 --> 00:20:25.200
That's why I like Prettier,

473
00:20:25.200 --> 00:20:27.030
I can just put them in when I'm thinking about it,

474
00:20:27.030 --> 00:20:28.827
and it says, "No, Wes you're dumb,

475
00:20:28.827 --> 00:20:29.980
"you don't know what you're doing."

476
00:20:29.980 --> 00:20:31.290
It will remove them for us.

477
00:20:31.290 --> 00:20:34.770
So now if I run, calculateBill

478
00:20:34.770 --> 00:20:36.263
and pass it $100,

479
00:20:37.180 --> 00:20:41.050
we get 128 bucks because I have a 13% taxRate

480
00:20:41.050 --> 00:20:45.120
and a 15% tipRate and they have defaulted.

481
00:20:45.120 --> 00:20:48.140
Now one little sort of gotcha that happens here is,

482
00:20:48.140 --> 00:20:50.890
what if you want to use the default tax rate

483
00:20:50.890 --> 00:20:52.270
but not the default tip rate?

484
00:20:52.270 --> 00:20:53.290
So we'll go here.

485
00:20:53.290 --> 00:20:54.770
Let's go the very bottom,

486
00:20:54.770 --> 00:20:57.653
const myBill4 is equal to calculateBill,

487
00:21:00.397 --> 00:21:04.720
$100 and you want to use the default taxRate.

488
00:21:04.720 --> 00:21:07.400
So just maybe skip it or something like that,

489
00:21:07.400 --> 00:21:08.817
I don't know what goes in here

490
00:21:08.817 --> 00:21:11.640
and then I want to pass a 20% tip rate,

491
00:21:11.640 --> 00:21:12.830
this is going to break, right?

492
00:21:12.830 --> 00:21:13.715
Watch.

493
00:21:13.715 --> 00:21:14.548
myBill4.

494
00:21:17.640 --> 00:21:20.030
Unexpected Token: comma,

495
00:21:20.030 --> 00:21:23.090
okay it expected you to actually pass a value here.

496
00:21:23.090 --> 00:21:25.340
So the only thing you can pass into a function

497
00:21:25.340 --> 00:21:29.750
to make it kick back to its default value is undefined,

498
00:21:29.750 --> 00:21:33.850
meaning that functions will only ever fall back

499
00:21:33.850 --> 00:21:36.660
to their defaults, if nothing is passed

500
00:21:36.660 --> 00:21:39.590
and remember, when a variable is not set to anything,

501
00:21:39.590 --> 00:21:41.090
it is the value of undefined.

502
00:21:41.090 --> 00:21:43.770
So you can't go ahead and pass zero here

503
00:21:43.770 --> 00:21:46.210
and expected it to fall back to the default

504
00:21:46.210 --> 00:21:48.500
or you can't say false or anything like that.

505
00:21:48.500 --> 00:21:50.310
You have to pass undefined.

506
00:21:50.310 --> 00:21:51.580
And what that will do is,

507
00:21:51.580 --> 00:21:54.900
it will work explicitly passing undefined

508
00:21:54.900 --> 00:21:58.290
and then that will make it fall back to 0.13.

509
00:21:58.290 --> 00:22:01.400
And it works just like we had wanted.

510
00:22:01.400 --> 00:22:03.483
It's very often,

511
00:22:05.070 --> 00:22:06.220
it's very infrequently

512
00:22:06.220 --> 00:22:07.970
that I actually ever have to do that.

513
00:22:07.970 --> 00:22:09.020
But it's worth knowing

514
00:22:09.020 --> 00:22:10.860
that that's how

515
00:22:10.860 --> 00:22:13.750
the function will define

516
00:22:13.750 --> 00:22:17.460
whether it should fall back to the default or not.

517
00:22:17.460 --> 00:22:20.990
And it's nothing to do with truthy or falsy,

518
00:22:20.990 --> 00:22:23.830
which we're going to learn in an upcoming video.

519
00:22:23.830 --> 00:22:25.500
So that's parameters and arguments.

520
00:22:25.500 --> 00:22:26.900
In next video, we're going to look at

521
00:22:26.900 --> 00:22:30.320
a handful of other ways to define a function

522
00:22:30.320 --> 00:22:32.590
rather than just the function keyword

523
00:22:32.590 --> 00:22:34.640
and followed by the name of the function.

